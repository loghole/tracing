// Code generated by MockGen. DO NOT EDIT.
// Source: go.opentelemetry.io/otel/sdk/trace (interfaces: SpanProcessor)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	trace "go.opentelemetry.io/otel/sdk/trace"
)

// MockSpanProcessor is a mock of SpanProcessor interface.
type MockSpanProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockSpanProcessorMockRecorder
}

// MockSpanProcessorMockRecorder is the mock recorder for MockSpanProcessor.
type MockSpanProcessorMockRecorder struct {
	mock *MockSpanProcessor
}

// NewMockSpanProcessor creates a new mock instance.
func NewMockSpanProcessor(ctrl *gomock.Controller) *MockSpanProcessor {
	mock := &MockSpanProcessor{ctrl: ctrl}
	mock.recorder = &MockSpanProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpanProcessor) EXPECT() *MockSpanProcessorMockRecorder {
	return m.recorder
}

// ForceFlush mocks base method.
func (m *MockSpanProcessor) ForceFlush(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceFlush", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceFlush indicates an expected call of ForceFlush.
func (mr *MockSpanProcessorMockRecorder) ForceFlush(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceFlush", reflect.TypeOf((*MockSpanProcessor)(nil).ForceFlush), arg0)
}

// OnEnd mocks base method.
func (m *MockSpanProcessor) OnEnd(arg0 trace.ReadOnlySpan) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnEnd", arg0)
}

// OnEnd indicates an expected call of OnEnd.
func (mr *MockSpanProcessorMockRecorder) OnEnd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnEnd", reflect.TypeOf((*MockSpanProcessor)(nil).OnEnd), arg0)
}

// OnStart mocks base method.
func (m *MockSpanProcessor) OnStart(arg0 context.Context, arg1 trace.ReadWriteSpan) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnStart", arg0, arg1)
}

// OnStart indicates an expected call of OnStart.
func (mr *MockSpanProcessorMockRecorder) OnStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStart", reflect.TypeOf((*MockSpanProcessor)(nil).OnStart), arg0, arg1)
}

// Shutdown mocks base method.
func (m *MockSpanProcessor) Shutdown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockSpanProcessorMockRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockSpanProcessor)(nil).Shutdown), arg0)
}
